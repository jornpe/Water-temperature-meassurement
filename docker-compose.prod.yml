services:
  backend:
    image: ghcr.io/jornpe/water-temp-backend:latest
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - PORT=8080
      - ConnectionStrings__Default=Host=db;Port=5432;Database=watertemp;Username=app;Password=${POSTGRES_PASSWORD:?set in env}
      - JWT__Secret=${JWT_SECRET:?set in env}
      - Database__AutoCreate=${DATABASE_AUTO_CREATE:-false}
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy

  frontend:
    image: ghcr.io/jornpe/water-temp-frontend:latest
    # Provide full backend URL for the frontend to reach the API
    # Override via env when running compose: API_BASE_URL=https://api.example.com
    environment:
      - API_BASE_URL=${API_BASE_URL:-http://backend:8080}
    depends_on:
      - backend
    ports:
      - "80:80"

  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_DB=watertemp
      - POSTGRES_USER=app
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?set in env}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d watertemp"]
      interval: 5s
      timeout: 5s
      retries: 10

  # Optional: Automatic database backups (uncomment if desired)
  # db-backup:
  #   image: postgres:16-alpine
  #   restart: unless-stopped
  #   environment:
  #     - PGPASSWORD=${POSTGRES_PASSWORD:?set in env}
  #   volumes:
  #     - db-data:/var/lib/postgresql/data:ro
  #     - ./backups:/backups
  #   command: >
  #     sh -c "while true; do
  #       pg_dump -h db -U app -d watertemp > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql;
  #       find /backups -name '*.sql' -mtime +7 -delete;
  #       sleep 86400;
  #     done"
  #   depends_on:
  #     db:
  #       condition: service_healthy

volumes:
  db-data:
