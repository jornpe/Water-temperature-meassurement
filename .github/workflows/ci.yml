name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  versioning:
    name: Calculate version and tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.gitversion.outputs.SemVer }}
      major: ${{ steps.gitversion.outputs.Major }}
      minor: ${{ steps.gitversion.outputs.Minor }}
      patch: ${{ steps.gitversion.outputs.Patch }}
      full-version: ${{ steps.gitversion.outputs.FullSemVer }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # required for GitVersion
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v4
        with:
          versionSpec: '5.x'
      - name: Determine version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v4
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml
      - name: Display GitVersion outputs
        run: |
          echo "Version: ${{ steps.gitversion.outputs.SemVer }}"
          echo "Full Version: ${{ steps.gitversion.outputs.FullSemVer }}"
          echo "Major: ${{ steps.gitversion.outputs.Major }}"
          echo "Minor: ${{ steps.gitversion.outputs.Minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.Patch }}"
      - name: Create and push tag
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag "v${{ steps.gitversion.outputs.SemVer }}"
          git push origin "v${{ steps.gitversion.outputs.SemVer }}"

  changes:
    name: Detect changes to backend and frontend
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Detect changed paths
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            backend:
              - 'src/backend/WaterTemperature.Api/**'
            frontend:
              - 'src/frontend/app/**'
  build-backend:
    name: Build backend
    runs-on: ubuntu-latest
    needs: [versioning]
    defaults:
      run:
        working-directory: src/backend/WaterTemperature.Api
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --configuration Release --no-restore
      - name: Publish
        run: dotnet publish -c Release -o out --no-build /p:UseAppHost=false

  test-backend:
    name: Test backend
    runs-on: ubuntu-latest
    needs: [versioning, build-backend]
    defaults:
      run:
        working-directory: src/backend/WaterTemperature.Api.Tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Restore
        run: dotnet restore
      - name: Test
        run: dotnet test -c Release --no-restore --logger "trx;LogFileName=test-results.trx"
      - name: Publish Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: src/backend/WaterTemperature.Api.Tests/TestResults

  build-frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    needs: [versioning]
    defaults:
      run:
        working-directory: src/frontend/app
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: 'src/frontend/app/package-lock.json'
      - name: Install
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi
      - name: Build
        run: npm run build

  docker-images:
    name: Build docker images
    runs-on: ubuntu-latest
    needs: [versioning, build-backend, build-frontend, test-backend, changes]
    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true' }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU (for cross-arch builds)
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./src/backend/WaterTemperature.Api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/jornpe/water-temp-backend:latest
            ghcr.io/jornpe/water-temp-backend:${{ needs.versioning.outputs.version }}
            ghcr.io/jornpe/water-temp-backend:${{ github.sha }}
      - name: Build frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./src/frontend/app
          file: ./src/frontend/app/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/jornpe/water-temp-frontend:latest
            ghcr.io/jornpe/water-temp-frontend:${{ needs.versioning.outputs.version }}
            ghcr.io/jornpe/water-temp-frontend:${{ github.sha }}
